{"version":3,"file":"minMaxTimePlugin.js","sources":["../../src/utils/index.ts","../../src/utils/formatting.ts","../../src/types/options.ts","../../src/l10n/default.ts","../../src/utils/dates.ts","../../src/plugins/minMaxTimePlugin.ts"],"sourcesContent":["export const pad = (number: string | number, length = 2) =>\n  `000${number}`.slice(length * -1);\nexport const int = (bool: boolean) => (bool === true ? 1 : 0);\n\n/* istanbul ignore next */\nexport function debounce<F extends Function>(fn: F, wait: number) {\n  let t: NodeJS.Timeout;\n  return function (this: any) {\n    const args = arguments;\n    clearTimeout(t);\n    t = setTimeout(() => fn.apply(this, args), wait);\n  };\n}\n\nexport const arrayify = <T>(obj: T | T[]): T[] =>\n  obj instanceof Array ? obj : [obj];\n\nexport type IncrementEvent = MouseEvent & { delta: number; type: \"increment\" };\n","import { int, pad } from \"../utils\";\nimport { Locale } from \"../types/locale\";\nimport { ParsedOptions } from \"../types/options\";\n\nexport type token =\n  | \"D\"\n  | \"F\"\n  | \"G\"\n  | \"H\"\n  | \"J\"\n  | \"K\"\n  | \"M\"\n  | \"S\"\n  | \"U\"\n  | \"W\"\n  | \"Y\"\n  | \"Z\"\n  | \"d\"\n  | \"h\"\n  | \"i\"\n  | \"j\"\n  | \"l\"\n  | \"m\"\n  | \"n\"\n  | \"s\"\n  | \"u\"\n  | \"w\"\n  | \"y\";\n\nconst doNothing = (): undefined => undefined;\n\nexport const monthToStr = (\n  monthNumber: number,\n  shorthand: boolean,\n  locale: Locale\n) => locale.months[shorthand ? \"shorthand\" : \"longhand\"][monthNumber];\n\nexport type RevFormatFn = (\n  date: Date,\n  data: string,\n  locale: Locale\n) => Date | void | undefined;\nexport type RevFormat = Record<string, RevFormatFn>;\nexport const revFormat: RevFormat = {\n  D: doNothing,\n  F: function (dateObj: Date, monthName: string, locale: Locale) {\n    dateObj.setMonth(locale.months.longhand.indexOf(monthName));\n  },\n  G: (dateObj: Date, hour: string) => {\n    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));\n  },\n  H: (dateObj: Date, hour: string) => {\n    dateObj.setHours(parseFloat(hour));\n  },\n  J: (dateObj: Date, day: string) => {\n    dateObj.setDate(parseFloat(day));\n  },\n  K: (dateObj: Date, amPM: string, locale: Locale) => {\n    dateObj.setHours(\n      (dateObj.getHours() % 12) +\n        12 * int(new RegExp(locale.amPM[1], \"i\").test(amPM))\n    );\n  },\n  M: function (dateObj: Date, shortMonth: string, locale: Locale) {\n    dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\n  },\n  S: (dateObj: Date, seconds: string) => {\n    dateObj.setSeconds(parseFloat(seconds));\n  },\n  U: (_: Date, unixSeconds: string) => new Date(parseFloat(unixSeconds) * 1000),\n\n  W: function (dateObj: Date, weekNum: string, locale: Locale) {\n    const weekNumber = parseInt(weekNum);\n    const date = new Date(\n      dateObj.getFullYear(),\n      0,\n      2 + (weekNumber - 1) * 7,\n      0,\n      0,\n      0,\n      0\n    );\n    date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);\n\n    return date;\n  },\n  Y: (dateObj: Date, year: string) => {\n    dateObj.setFullYear(parseFloat(year));\n  },\n  Z: (_: Date, ISODate: string) => new Date(ISODate),\n\n  d: (dateObj: Date, day: string) => {\n    dateObj.setDate(parseFloat(day));\n  },\n  h: (dateObj: Date, hour: string) => {\n    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));\n  },\n  i: (dateObj: Date, minutes: string) => {\n    dateObj.setMinutes(parseFloat(minutes));\n  },\n  j: (dateObj: Date, day: string) => {\n    dateObj.setDate(parseFloat(day));\n  },\n  l: doNothing,\n  m: (dateObj: Date, month: string) => {\n    dateObj.setMonth(parseFloat(month) - 1);\n  },\n  n: (dateObj: Date, month: string) => {\n    dateObj.setMonth(parseFloat(month) - 1);\n  },\n  s: (dateObj: Date, seconds: string) => {\n    dateObj.setSeconds(parseFloat(seconds));\n  },\n  u: (_: Date, unixMillSeconds: string) =>\n    new Date(parseFloat(unixMillSeconds)),\n  w: doNothing,\n  y: (dateObj: Date, year: string) => {\n    dateObj.setFullYear(2000 + parseFloat(year));\n  },\n};\n\nexport type TokenRegex = { [k in token]: string };\nexport const tokenRegex: TokenRegex = {\n  D: \"\", // locale-dependent, setup on runtime\n  F: \"\", // locale-dependent, setup on runtime\n  G: \"(\\\\d\\\\d|\\\\d)\",\n  H: \"(\\\\d\\\\d|\\\\d)\",\n  J: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\n  K: \"\", // locale-dependent, setup on runtime\n  M: \"\", // locale-dependent, setup on runtime\n  S: \"(\\\\d\\\\d|\\\\d)\",\n  U: \"(.+)\",\n  W: \"(\\\\d\\\\d|\\\\d)\",\n  Y: \"(\\\\d{4})\",\n  Z: \"(.+)\",\n  d: \"(\\\\d\\\\d|\\\\d)\",\n  h: \"(\\\\d\\\\d|\\\\d)\",\n  i: \"(\\\\d\\\\d|\\\\d)\",\n  j: \"(\\\\d\\\\d|\\\\d)\",\n  l: \"\", // locale-dependent, setup on runtime\n  m: \"(\\\\d\\\\d|\\\\d)\",\n  n: \"(\\\\d\\\\d|\\\\d)\",\n  s: \"(\\\\d\\\\d|\\\\d)\",\n  u: \"(.+)\",\n  w: \"(\\\\d\\\\d|\\\\d)\",\n  y: \"(\\\\d{2})\",\n};\n\nexport type Formats = Record<\n  token,\n  (date: Date, locale: Locale, options: ParsedOptions) => string | number\n>;\nexport const formats: Formats = {\n  // get the date in UTC\n  Z: (date: Date) => date.toISOString(),\n\n  // weekday name, short, e.g. Thu\n  D: function (date: Date, locale: Locale, options: ParsedOptions) {\n    return locale.weekdays.shorthand[\n      formats.w(date, locale, options) as number\n    ];\n  },\n\n  // full month name e.g. January\n  F: function (date: Date, locale: Locale, options: ParsedOptions) {\n    return monthToStr(\n      (formats.n(date, locale, options) as number) - 1,\n      false,\n      locale\n    );\n  },\n\n  // padded hour 1-12\n  G: function (date: Date, locale: Locale, options: ParsedOptions) {\n    return pad(formats.h(date, locale, options));\n  },\n\n  // hours with leading zero e.g. 03\n  H: (date: Date) => pad(date.getHours()),\n\n  // day (1-30) with ordinal suffix e.g. 1st, 2nd\n  J: function (date: Date, locale: Locale) {\n    return locale.ordinal !== undefined\n      ? date.getDate() + locale.ordinal(date.getDate())\n      : date.getDate();\n  },\n\n  // AM/PM\n  K: (date: Date, locale: Locale) => locale.amPM[int(date.getHours() > 11)],\n\n  // shorthand month e.g. Jan, Sep, Oct, etc\n  M: function (date: Date, locale: Locale) {\n    return monthToStr(date.getMonth(), true, locale);\n  },\n\n  // seconds 00-59\n  S: (date: Date) => pad(date.getSeconds()),\n\n  // unix timestamp\n  U: (date: Date) => date.getTime() / 1000,\n\n  W: function (date: Date, _: Locale, options: ParsedOptions) {\n    return options.getWeek(date);\n  },\n\n  // full year e.g. 2016, padded (0001-9999)\n  Y: (date: Date) => pad(date.getFullYear(), 4),\n\n  // day in month, padded (01-30)\n  d: (date: Date) => pad(date.getDate()),\n\n  // hour from 1-12 (am/pm)\n  h: (date: Date) => (date.getHours() % 12 ? date.getHours() % 12 : 12),\n\n  // minutes, padded with leading zero e.g. 09\n  i: (date: Date) => pad(date.getMinutes()),\n\n  // day in month (1-30)\n  j: (date: Date) => date.getDate(),\n\n  // weekday name, full, e.g. Thursday\n  l: function (date: Date, locale: Locale) {\n    return locale.weekdays.longhand[date.getDay()];\n  },\n\n  // padded month number (01-12)\n  m: (date: Date) => pad(date.getMonth() + 1),\n\n  // the month number (1-12)\n  n: (date: Date) => date.getMonth() + 1,\n\n  // seconds 0-59\n  s: (date: Date) => date.getSeconds(),\n\n  // Unix Milliseconds\n  u: (date: Date) => date.getTime(),\n\n  // number of the day of the week\n  w: (date: Date) => date.getDay(),\n\n  // last two digits of year e.g. 16 for 2016\n  y: (date: Date) => String(date.getFullYear()).substring(2),\n};\n","import { Instance } from \"./instance\";\nimport { CustomLocale, key as LocaleKey, Locale } from \"./locale\";\n\nexport type DateOption = Date | string | number;\nexport type DateRangeLimit<D = DateOption> = { from: D; to: D };\nexport type DateLimit<D = DateOption> =\n  | D\n  | DateRangeLimit<D>\n  | ((date: Date) => boolean);\n\nexport type Hook = (\n  dates: Date[],\n  currentDateString: string,\n  self: Instance,\n  data?: any\n) => void;\n\nexport type HookKey =\n  | \"onChange\"\n  | \"onClose\"\n  | \"onDayCreate\"\n  | \"onDestroy\"\n  | \"onKeyDown\"\n  | \"onMonthChange\"\n  | \"onOpen\"\n  | \"onParseConfig\"\n  | \"onReady\"\n  | \"onValueUpdate\"\n  | \"onYearChange\"\n  | \"onPreCalendarPosition\";\n\nexport const HOOKS: HookKey[] = [\n  \"onChange\",\n  \"onClose\",\n  \"onDayCreate\",\n  \"onDestroy\",\n  \"onKeyDown\",\n  \"onMonthChange\",\n  \"onOpen\",\n  \"onParseConfig\",\n  \"onReady\",\n  \"onValueUpdate\",\n  \"onYearChange\",\n  \"onPreCalendarPosition\",\n];\n\nexport type Plugin<E = {}> = (fp: Instance & E) => Options;\n\nexport interface BaseOptions {\n  /*\n  Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n  */\n  allowInput: boolean;\n\n  /* Allow preloading of invalid date */\n  allowInvalidPreload: boolean;\n\n  /* Exactly the same as date format, but for the altInput field */\n  altFormat: string;\n\n  /* Show the user a readable date (as per altFormat), but return something totally different to the server.*/\n  altInput: boolean;\n\n  /* This class will be added to the input element created by the altInput option.  Note that altInput already inherits classes from the original input. */\n  altInputClass: string;\n\n  /* Whether to enable animations, such as month transitions */\n  animate: boolean;\n\n  /* Instead of body, appends the calendar to the specified node instead. */\n  appendTo: HTMLElement;\n\n  /* Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud. */\n  /* Defaults to \"F j, Y\" */\n  ariaDateFormat: string;\n\n  /* Whether the default time should be auto-filled when the input is empty and gains or loses focus. */\n  /* Defaults to true */\n  autoFillDefaultTime: boolean;\n\n  /*\n    Whether clicking on the input should open the picker.\n    Set it to false if you only want to open the calendar programmatically\n  */\n  clickOpens: boolean;\n\n  /* Whether calendar should close after date selection */\n  closeOnSelect: boolean;\n\n  /* Close btn on bottom */\n  closeBtn: () => boolean;\n  /*\n    If \"mode\" is \"multiple\", this string will be used to join\n    selected dates together for the date input value.\n  */\n  conjunction: string;\n\n  /*\n    A string of characters which are used to define how the date will be displayed in the input box.\n    See https://chmln.github.io/flatpickr/formatting\n  */\n  dateFormat: string;\n\n  /* The initial selected date(s). */\n  defaultDate: DateOption | DateOption[];\n\n  /* Initial value of the hour element, when no date is selected */\n  defaultHour: number;\n\n  /* Initial value of the minute element, when no date is selected */\n  defaultMinute: number;\n\n  /* Initial value of the seconds element, when no date is selected */\n  defaultSeconds: number;\n\n  /*\n    Disables certain dates, preventing them from being selected.\n    See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates */\n  disable: DateLimit<DateOption>[];\n\n  /* Set this to true to always use the non-native picker on mobile devices.\nBy default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used. */\n  disableMobile: boolean;\n\n  /* Disables all dates except these specified. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few */\n  enable: DateLimit<DateOption>[];\n\n  /* Enables seconds selection in the time picker.\n   */\n  enableSeconds: boolean;\n\n  /* Enables the time picker */\n  enableTime: boolean;\n\n  errorHandler: (e: Error) => void;\n\n  /* Allows using a custom date formatting function instead of the built-in. Generally unnecessary.  */\n  formatDate: (date: Date, format: string, locale: Locale) => string;\n\n  /* If \"weekNumbers\" are enabled, this is the function that outputs the week number for a given dates, optionally along with other text  */\n  getWeek: (date: Date) => string | number;\n\n  /*   Adjusts the step for the hour input (incl. scrolling) */\n  hourIncrement: number;\n\n  /* By default, clicking anywhere outside of calendar/input will close the calendar.\n  Clicking on elements specified in this option will not close the calendar */\n  ignoredFocusElements: HTMLElement[];\n\n  /* Displays the calendar inline */\n  inline: boolean;\n\n  /* The locale, either as a string (e.g. \"ru\", \"en\") or as an object.\n  See https://chmln.github.io/flatpickr/localization/ */\n  locale: LocaleKey | Partial<CustomLocale>;\n\n  /* The maximum date that a user can pick to (inclusive). */\n  maxDate: DateOption;\n\n  /* The maximum time that a user can pick to (inclusive). */\n  maxTime: DateOption;\n\n  /* The minimum date that a user can start picking from (inclusive). */\n  minDate: DateOption;\n\n  /* The minimum time that a user can start picking from (inclusive). */\n  minTime: DateOption;\n\n  /* Adjusts the step for the minute input (incl. scrolling)\n  Defaults to 5 */\n  minuteIncrement: number;\n\n  /* Date selection mode, defaults to \"single\" */\n  mode: \"single\" | \"multiple\" | \"range\" | \"time\";\n\n  /* How the month selector in the calendar should be shown */\n  monthSelectorType: \"dropdown\" | \"static\";\n\n  /* HTML for the right arrow icon, used to switch months. */\n  nextArrow: string;\n\n  /* Hides the day selection in calendar.\nUse it along with \"enableTime\" to create a time picker. */\n  noCalendar: boolean;\n\n  now?: DateOption;\n\n  /* Fires when the selected dates have changed - when a date is picked or cleared, by user or programmatically */\n  onChange: Hook | Hook[];\n\n  /* Fires when the calendar is closed */\n  onClose: Hook | Hook[];\n\n  /* Fires for every day cell in the calendar, where the fourth argument is the html element of the cell. See https://chmln.github.io/flatpickr/events/#ondaycreate*/\n  onDayCreate: Hook | Hook[];\n\n  /* Fires before the calendar instance is destroyed */\n  onDestroy: Hook | Hook[];\n\n  /* Fires when valid keyboard input for calendar is detected */\n  onKeyDown: Hook | Hook[];\n\n  /* Fires after the month has changed */\n  onMonthChange: Hook | Hook[];\n\n  /* Fires after the calendar is opened */\n  onOpen: Hook | Hook[];\n\n  /* Fires after the configuration for the calendar is parsed */\n  onParseConfig: Hook | Hook[];\n\n  /* Fires once the calendar instance is ready */\n  onReady: Hook | Hook[];\n\n  /* Like onChange, but fires immediately after any date changes */\n  onValueUpdate: Hook | Hook[];\n\n  /* Fires after the year has changed */\n  onYearChange: Hook | Hook[];\n\n  onPreCalendarPosition: Hook | Hook[];\n\n  /* A custom datestring parser */\n  parseDate: (date: string, format: string) => Date;\n\n  /* Plugins. See https://chmln.github.io/flatpickr/plugins/ */\n  plugins: Plugin[];\n\n  /* How the calendar should be positioned with regards to the input. Defaults to \"auto\" */\n  position:\n    | \"auto\"\n    | \"above\"\n    | \"below\"\n    | \"auto left\"\n    | \"auto center\"\n    | \"auto right\"\n    | \"above left\"\n    | \"above center\"\n    | \"above right\"\n    | \"below left\"\n    | \"below center\"\n    | \"below right\"\n    | ((self: Instance, customElement: HTMLElement | undefined) => void);\n\n  /*\n    The element off of which the calendar will be positioned.\n    Defaults to the date input\n  */\n  positionElement: Element;\n\n  /* HTML for the left arrow icon, used to switch months. */\n  prevArrow: string;\n\n  /* Whether to display the current month name in shorthand mode, e.g. \"Sep\" instead \"September\" */\n  shorthandCurrentMonth: boolean;\n\n  /* Creates a wrapper to position the calendar. Use this if the input is inside a scrollable element */\n  static: boolean;\n\n  /* Sets the number of months to show */\n  showMonths?: number;\n\n  /* Displays time picker in 24 hour mode without AM/PM selection when enabled.*/\n  time_24hr: boolean;\n\n  /* Display week numbers left of the calendar. */\n  weekNumbers: boolean;\n\n  /* See https://chmln.github.io/flatpickr/examples/#flatpickr-external-elements */\n  wrap: boolean;\n}\n\nexport type Options = Partial<BaseOptions>;\n\nexport interface ParsedOptions {\n  _disable: DateLimit<Date>[];\n  _enable?: DateLimit<Date>[];\n  _maxDate?: Date;\n  _maxTime?: Date;\n  _minDate?: Date;\n  _minTime?: Date;\n  allowInput: boolean;\n  allowInvalidPreload: boolean;\n  altFormat: string;\n  altInput: boolean;\n  altInputClass: string;\n  animate: boolean;\n  appendTo?: HTMLElement;\n  ariaDateFormat: string;\n  autoFillDefaultTime: boolean;\n  clickOpens: boolean;\n  closeOnSelect: boolean;\n  conjunction: string;\n  dateFormat: string;\n  defaultDate?: Date | Date[];\n  defaultHour: number;\n  defaultMinute: number;\n  defaultSeconds: number;\n  disable: DateLimit<Date>[];\n  disableMobile: boolean;\n  enable?: DateLimit<Date>[];\n  enableSeconds: boolean;\n  enableTime: boolean;\n  errorHandler: (err: Error) => void;\n  formatDate?: Options[\"formatDate\"];\n  getWeek: (date: Date) => string | number;\n  hourIncrement: number;\n  ignoredFocusElements: HTMLElement[];\n  inline: boolean;\n  locale: LocaleKey | CustomLocale;\n  maxDate?: Date;\n  maxTime?: Date;\n  minDate?: Date;\n  minTime?: Date;\n  minuteIncrement: number;\n  mode: BaseOptions[\"mode\"];\n  monthSelectorType: string;\n  nextArrow: string;\n  noCalendar: boolean;\n  now: Date;\n  onChange: Hook[];\n  onClose: Hook[];\n  onDayCreate: Hook[];\n  onDestroy: Hook[];\n  onKeyDown: Hook[];\n  onMonthChange: Hook[];\n  onOpen: Hook[];\n  onParseConfig: Hook[];\n  onReady: Hook[];\n  onValueUpdate: Hook[];\n  onYearChange: Hook[];\n  onPreCalendarPosition: Hook[];\n  parseDate?: BaseOptions[\"parseDate\"];\n  plugins: Plugin[];\n  position: BaseOptions[\"position\"];\n  positionElement?: HTMLElement;\n  prevArrow: string;\n  shorthandCurrentMonth: boolean;\n  showMonths: number;\n  static: boolean;\n  time_24hr: boolean;\n  weekNumbers: boolean;\n  wrap: boolean;\n}\n\nexport const defaults: ParsedOptions = {\n  _disable: [],\n  allowInput: false,\n  allowInvalidPreload: false,\n  altFormat: \"F j, Y\",\n  altInput: false,\n  altInputClass: \"form-control input\",\n  animate:\n    typeof window === \"object\" &&\n    window.navigator.userAgent.indexOf(\"MSIE\") === -1,\n  ariaDateFormat: \"F j, Y\",\n  autoFillDefaultTime: true,\n  clickOpens: true,\n  closeOnSelect: true,\n  conjunction: \", \",\n  dateFormat: \"Y-m-d\",\n  defaultHour: 12,\n  defaultMinute: 0,\n  defaultSeconds: 0,\n  disable: [],\n  disableMobile: false,\n  enableSeconds: false,\n  enableTime: false,\n  errorHandler: (err: Error) =>\n    typeof console !== \"undefined\" && console.warn(err),\n  getWeek: (givenDate: Date) => {\n    const date = new Date(givenDate.getTime());\n    date.setHours(0, 0, 0, 0);\n\n    // Thursday in current week decides the year.\n    date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));\n\n    // January 4 is always in week 1.\n    var week1 = new Date(date.getFullYear(), 0, 4);\n\n    // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n    return (\n      1 +\n      Math.round(\n        ((date.getTime() - week1.getTime()) / 86400000 -\n          3 +\n          ((week1.getDay() + 6) % 7)) /\n          7\n      )\n    );\n  },\n  hourIncrement: 1,\n  ignoredFocusElements: [],\n  inline: false,\n  locale: \"default\",\n  minuteIncrement: 5,\n  mode: \"single\",\n  monthSelectorType: \"dropdown\",\n  nextArrow:\n    \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>\",\n  noCalendar: false,\n  now: new Date(),\n  onChange: [],\n  onClose: [],\n  onDayCreate: [],\n  onDestroy: [],\n  onKeyDown: [],\n  onMonthChange: [],\n  onOpen: [],\n  onParseConfig: [],\n  onReady: [],\n  onValueUpdate: [],\n  onYearChange: [],\n  onPreCalendarPosition: [],\n  plugins: [],\n  position: \"auto\",\n  positionElement: undefined,\n  prevArrow:\n    \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>\",\n  shorthandCurrentMonth: false,\n  showMonths: 1,\n  static: false,\n  time_24hr: false,\n  weekNumbers: false,\n  wrap: false,\n};\n","import { Locale } from \"../types/locale\";\n\nexport const english: Locale = {\n  weekdays: {\n    shorthand: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    longhand: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n  },\n  months: {\n    shorthand: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n    longhand: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n  },\n  daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  firstDayOfWeek: 0,\n  ordinal: (nth: number) => {\n    const s = nth % 100;\n    if (s > 3 && s < 21) return \"th\";\n    switch (s % 10) {\n      case 1:\n        return \"st\";\n      case 2:\n        return \"nd\";\n      case 3:\n        return \"rd\";\n      default:\n        return \"th\";\n    }\n  },\n  rangeSeparator: \" to \",\n  weekAbbreviation: \"Wk\",\n  scrollTitle: \"Scroll to increment\",\n  toggleTitle: \"Click to toggle\",\n  amPM: [\"AM\", \"PM\"],\n  yearAriaLabel: \"Year\",\n  monthAriaLabel: \"Month\",\n  hourAriaLabel: \"Hour\",\n  minuteAriaLabel: \"Minute\",\n  time_24hr: false,\n};\n\nexport default english;\n","import { Locale } from \"../types/locale\";\nimport {\n  tokenRegex,\n  RevFormatFn,\n  token,\n  revFormat,\n  formats,\n} from \"./formatting\";\nimport { defaults, ParsedOptions } from \"../types/options\";\nimport { english } from \"../l10n/default\";\n\nexport interface FormatterArgs {\n  config?: ParsedOptions;\n  l10n?: Locale;\n  isMobile?: boolean;\n}\n\nexport const createDateFormatter = ({\n  config = defaults,\n  l10n = english,\n  isMobile = false,\n}: FormatterArgs) => (\n  dateObj: Date,\n  frmt: string,\n  overrideLocale?: Locale\n): string => {\n  const locale = overrideLocale || l10n;\n\n  if (config.formatDate !== undefined && !isMobile) {\n    return config.formatDate(dateObj, frmt, locale);\n  }\n\n  return frmt\n    .split(\"\")\n    .map((c, i, arr) =>\n      formats[c as token] && arr[i - 1] !== \"\\\\\"\n        ? formats[c as token](dateObj, locale, config)\n        : c !== \"\\\\\"\n        ? c\n        : \"\"\n    )\n    .join(\"\");\n};\n\nexport const createDateParser = ({ config = defaults, l10n = english }) => (\n  date: Date | string | number,\n  givenFormat?: string,\n  timeless?: boolean,\n  customLocale?: Locale\n): Date | undefined => {\n  if (date !== 0 && !date) return undefined;\n\n  const locale = customLocale || l10n;\n\n  let parsedDate: Date | undefined;\n  const dateOrig = date;\n\n  if (date instanceof Date) parsedDate = new Date(date.getTime());\n  else if (\n    typeof date !== \"string\" &&\n    date.toFixed !== undefined // timestamp\n  )\n    // create a copy\n\n    parsedDate = new Date(date);\n  else if (typeof date === \"string\") {\n    // date string\n    const format = givenFormat || (config || defaults).dateFormat;\n    const datestr = String(date).trim();\n\n    if (datestr === \"today\") {\n      parsedDate = new Date();\n      timeless = true;\n    } else if (config && config.parseDate) {\n      parsedDate = config.parseDate(date, format);\n    } else if (\n      /Z$/.test(datestr) ||\n      /GMT$/.test(datestr) // datestrings w/ timezone\n    ) {\n      parsedDate = new Date(date);\n    } else {\n      let matched,\n        ops: { fn: RevFormatFn; val: string }[] = [];\n\n      for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n        const token = format[i] as token;\n        const isBackSlash = (token as string) === \"\\\\\";\n        const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n        if (tokenRegex[token] && !escaped) {\n          regexStr += tokenRegex[token];\n          const match = new RegExp(regexStr).exec(date);\n          if (match && (matched = true)) {\n            ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n              fn: revFormat[token],\n              val: match[++matchIndex],\n            });\n          }\n        } else if (!isBackSlash) regexStr += \".\"; // don't really care\n      }\n\n      parsedDate =\n        !config || !config.noCalendar\n          ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)\n          : (new Date(new Date().setHours(0, 0, 0, 0)) as Date);\n\n      ops.forEach(\n        ({ fn, val }) =>\n          (parsedDate = fn(parsedDate as Date, val, locale) || parsedDate)\n      );\n\n      parsedDate = matched ? parsedDate : undefined;\n    }\n  }\n\n  /* istanbul ignore next */\n  if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n    config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n    return undefined;\n  }\n\n  if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n\n  return parsedDate;\n};\n\n/**\n * Compute the difference in dates, measured in ms\n */\nexport function compareDates(date1: Date, date2: Date, timeless = true) {\n  if (timeless !== false) {\n    return (\n      new Date(date1.getTime()).setHours(0, 0, 0, 0) -\n      new Date(date2.getTime()).setHours(0, 0, 0, 0)\n    );\n  }\n\n  return date1.getTime() - date2.getTime();\n}\n\n/**\n * Compute the difference in times, measured in ms\n */\nexport function compareTimes(date1: Date, date2: Date) {\n  return (\n    3600 * (date1.getHours() - date2.getHours()) +\n    60 * (date1.getMinutes() - date2.getMinutes()) +\n    date1.getSeconds() -\n    date2.getSeconds()\n  );\n}\n\nexport const isBetween = (ts: number, ts1: number, ts2: number) => {\n  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\n\nexport const calculateSecondsSinceMidnight = (\n  hours: number,\n  minutes: number,\n  seconds: number\n) => {\n  return hours * 3600 + minutes * 60 + seconds;\n};\n\nexport const parseSeconds = (secondsSinceMidnight: number) => {\n  const hours = Math.floor(secondsSinceMidnight / 3600),\n    minutes = (secondsSinceMidnight - hours * 3600) / 60;\n  return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];\n};\n\nexport const duration = {\n  DAY: 86400000,\n};\n\nexport function getDefaultHours(config: ParsedOptions) {\n  let hours = config.defaultHour;\n  let minutes = config.defaultMinute;\n  let seconds = config.defaultSeconds;\n\n  if (config.minDate !== undefined) {\n    const minHour = config.minDate.getHours();\n    const minMinutes = config.minDate.getMinutes();\n    const minSeconds = config.minDate.getSeconds();\n\n    if (hours < minHour) {\n      hours = minHour;\n    }\n\n    if (hours === minHour && minutes < minMinutes) {\n      minutes = minMinutes;\n    }\n\n    if (hours === minHour && minutes === minMinutes && seconds < minSeconds)\n      seconds = config.minDate.getSeconds();\n  }\n\n  if (config.maxDate !== undefined) {\n    const maxHr = config.maxDate.getHours();\n    const maxMinutes = config.maxDate.getMinutes();\n    hours = Math.min(hours, maxHr);\n\n    if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);\n    if (hours === maxHr && minutes === maxMinutes)\n      seconds = config.maxDate.getSeconds();\n  }\n\n  return { hours, minutes, seconds };\n}\n","import { Instance } from \"../types/instance\";\nimport {\n  calculateSecondsSinceMidnight,\n  compareDates,\n  compareTimes,\n  createDateFormatter,\n  parseSeconds,\n} from \"../utils/dates\";\n\nimport { Plugin } from \"../types/options\";\n\nexport interface MinMaxTime {\n  minTime?: string;\n  maxTime?: string;\n}\n\nexport interface Config {\n  table?: Record<string, MinMaxTime>;\n  getTimeLimits?: (date: Date) => MinMaxTime;\n  tableDateFormat?: string;\n}\n\nexport interface State {\n  formatDate: (date: Date, f: string) => string;\n  tableDateFormat: string;\n  defaults: MinMaxTime;\n}\n\nfunction minMaxTimePlugin(config: Config = {}): Plugin {\n  const state: State = {\n    formatDate: createDateFormatter({}),\n    tableDateFormat: config.tableDateFormat || \"Y-m-d\",\n    defaults: {\n      minTime: undefined,\n      maxTime: undefined,\n    },\n  };\n\n  function findDateTimeLimit(date: Date): MinMaxTime | undefined {\n    if (config.table !== undefined) {\n      return config.table[state.formatDate(date, state.tableDateFormat)];\n    }\n\n    return config.getTimeLimits && config.getTimeLimits(date);\n  }\n\n  return function (fp) {\n    return {\n      onReady(this: Instance) {\n        state.formatDate = this.formatDate;\n        state.defaults = {\n          minTime:\n            this.config.minTime && state.formatDate(this.config.minTime, \"H:i\"),\n          maxTime:\n            this.config.maxTime && state.formatDate(this.config.maxTime, \"H:i\"),\n        };\n        fp.loadedPlugins.push(\"minMaxTime\");\n      },\n\n      onChange(this: Instance) {\n        const latest = this.latestSelectedDateObj;\n        const matchingTimeLimit = latest && findDateTimeLimit(latest);\n\n        if (latest && matchingTimeLimit !== undefined) {\n          this.set(matchingTimeLimit);\n\n          (fp.config.minTime as Date).setFullYear(latest.getFullYear());\n          (fp.config.maxTime as Date).setFullYear(latest.getFullYear());\n          (fp.config.minTime as Date).setMonth(latest.getMonth());\n          (fp.config.maxTime as Date).setMonth(latest.getMonth());\n          (fp.config.minTime as Date).setDate(latest.getDate());\n          (fp.config.maxTime as Date).setDate(latest.getDate());\n\n          if ((fp.config.minTime as Date) > (fp.config.maxTime as Date)) {\n            const minBound = calculateSecondsSinceMidnight(\n              (fp.config.minTime as Date).getHours(),\n              (fp.config.minTime as Date).getMinutes(),\n              (fp.config.minTime as Date).getSeconds()\n            );\n            const maxBound = calculateSecondsSinceMidnight(\n              (fp.config.maxTime as Date).getHours(),\n              (fp.config.maxTime as Date).getMinutes(),\n              (fp.config.maxTime as Date).getSeconds()\n            );\n            const currentTime = calculateSecondsSinceMidnight(\n              latest.getHours(),\n              latest.getMinutes(),\n              latest.getSeconds()\n            );\n\n            if (currentTime > maxBound && currentTime < minBound) {\n              const result = parseSeconds(minBound);\n              fp.setDate(\n                new Date(latest.getTime()).setHours(\n                  result[0],\n                  result[1],\n                  result[2]\n                ),\n                false\n              );\n            }\n          } else {\n            if (compareDates(latest, fp.config.maxTime as Date, false) > 0) {\n              fp.setDate(\n                new Date(latest.getTime()).setHours(\n                  (fp.config.maxTime as Date).getHours(),\n                  (fp.config.maxTime as Date).getMinutes(),\n                  (fp.config.maxTime as Date).getSeconds(),\n                  (fp.config.maxTime as Date).getMilliseconds()\n                ),\n                false\n              );\n            } else if (\n              compareDates(latest, fp.config.minTime as Date, false) < 0\n            ) {\n              fp.setDate(\n                new Date(latest.getTime()).setHours(\n                  (fp.config.minTime as Date).getHours(),\n                  (fp.config.minTime as Date).getMinutes(),\n                  (fp.config.minTime as Date).getSeconds(),\n                  (fp.config.minTime as Date).getMilliseconds()\n                ),\n                false\n              );\n            }\n          }\n        } else {\n          const newMinMax = state.defaults || {\n            minTime: undefined,\n            maxTime: undefined,\n          };\n\n          this.set(newMinMax);\n\n          if (!latest) return;\n\n          const { minTime, maxTime } = fp.config;\n\n          if (minTime && compareTimes(latest, minTime) < 0) {\n            fp.setDate(\n              new Date(latest.getTime()).setHours(\n                minTime.getHours(),\n                minTime.getMinutes(),\n                minTime.getSeconds(),\n                minTime.getMilliseconds()\n              ),\n              false\n            );\n          } else if (maxTime && compareTimes(latest, maxTime) > 0) {\n            fp.setDate(\n              new Date(latest.getTime()).setHours(\n                maxTime.getHours(),\n                maxTime.getMinutes(),\n                maxTime.getSeconds(),\n                maxTime.getMilliseconds()\n              )\n            );\n          }\n          //\n        }\n      },\n    };\n  };\n}\n\nexport default minMaxTimePlugin;\n"],"names":[],"mappings":"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"}